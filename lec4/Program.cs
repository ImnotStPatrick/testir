// двумерные массивы
/*
это таблица или матрица, массив массивов. массив имеет имя, поиск в нем с помощью индексации. 
чтобы обратиться к нужному элементу в двумерном массиве мы указываем в квадратных скобках сначала номер строки , затем номер столбца
table [1] [3] - имя массива table, [1] это номер строки,  [3] это номер столбца или индекц элемента, соответствующий номеру к одномерном массиве
матрица это математический объект, который записывается в форме таблицы, которая представляет собой количество строк и столбцов, на пересечении которых находятся элементы матрицы. их можно складывать, перемножать и вычислять их данные.

// задачи на использование двумерных массивов

// создать двумерный массив размером 3х5 из целых чисел, вывести элементы на экран
// 1) укажем тип данных int [,] -то есть в скобках ставим запятую, чтобы для программы стала понятна размерность и тип массива. первое число в массиве указывает на строку, второй (после запятой) указывает на столбец 
//2) указываем имя массива table
//3) выделяем память для нового массива new int[3, 5] - указываем сначала количество строк первым числом, вторым указываем количество элементов в строках

int[,] matrix = new int[3, 5]; // создаем двумерный массив с целочисленным типом данных, именем matrix; new int [3, 5] это команда для создания нового массива с тремя строками и пятью элементами в каждой строке
// необходимо пройтись по массиву и заполнить его числами. в одномерном массиве можно заполнить его с помощью цикла for, пройтись по всем элементам массива и заполнить их. в двумерном массиве- сначала нужно пройти по его одномерным массивам, то есть по строкам, и затем заполнить эти строки.
// для заполнения двумерного массива необходимы два цикла- первый нужен для прохода по СТРОКАМ, по одномерным массивам; второй цикл нужен для прохода по ЭЛЕМЕНТАМ каждого массива
Random rnd = new Random();
// создаем первый цикл for для прохода по строкам массива
for (int i = 0; i < matrix.GetLength(0); i++) // int i это переменная цикла счетчика, равна нулю(то есть пустая); далее необходимо указать количество строк в массиве, используем соответсвующее свойство  matrix.GetLength(0) - это свойство позволяет нам вычислить количество строк и столбцов.есл мы указываем нулевое измерение, это значит что бы требуем запросить количество строк в двумерном массиве; i++ это переход к следующему элементу
// данный цикл позволит нам обратиться к очередному одномерному массиву. внутри этого цикла сформируем второй цикл,который осуществит обращение к элементам одномерного массива
{
    for (int j = 0; j < matrix.GetLength(1); j++) // укажем индекс j, поскольку i уже занята в цикле; дальше обращаемся к количеству элементов в массиве командой matrix.GetLength(1); где в скобках указываем 1, чтобы запросить количество столбцов в этом массиве 
    { // на этом этапе мы можем обратиться к элементам массива с помощью имени matrix и индекса [] строки i и столбца j 
      // заполним массив случайными числами. для этого создадим обьект Random и выделим под него память 
      // Random rnd = new Random(); // переменная рандома
        matrix[i, j] = rnd.Next(1, 11); // присваиваем значениям матрицы случайные значения из обьекта рандома
                                        // объект Random создается при каждом обращении к элементам массива, то есть если элементов 15 в массиве, то объект Random создается 15 раз
                                        // осуществление 15 циклов создания рандома энергозатратно, поэтому его лучше вынести за циклы
    }
}
// выведем заполненный массив на экран. как для заполнения, так и для вывода, нам нужно перебрать все элементы массива
// воспользуемся для этого таким же циклом for 
{
    for (int i = 0; i < matrix.GetLength(0); i++) // проходимся по элементам массива
    {
        for (int j = 0; j < matrix.GetLength(1); j++) // проходимся по элементам массива
        {
            Console.Write($"{matrix[i, j]} "); // этот метод ($"{matrix [i, j]} "); называется интерполяция строк
        } 

         Console.WriteLine();
    }
    // Console.WriteLine();
}
*/
// работает. сейчас буду сама создавать и выводить массив на экран.

/*
int[,] matrix = new int[10, 10]; // создаем двумерный массив, в параметре  new int задаем размер массива
Random rand = new Random(); // задаем объект рандом, который заполнит наш массив случайными числами
{
    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            matrix[i, j] = rand.Next(1, 100);
        }
        // Console.WriteLine();
    }
    
} // заполнили массив числами

for (int i = 0; i < matrix.GetLength(0); i++)
{
    for (int j = 0; j < matrix.GetLength(1); j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
    Console.WriteLine();
} // вывела массив на экран
Console.WriteLine("вторая попытка создания массива без подсказок");


int[,] second = new int[5, 3];
Random randi = new Random();
{
    for (int i = 0; i < second.GetLength(0); i++)
    {
        for (int j = 0; j < second.GetLength(1); j++)
        {
            second[i, j] = randi.Next(20, 90);
        }
    }
} // заполнила массив числами

for (int i = 0; i < second.GetLength(0); i++)
{
    for (int j = 0; j < second.GetLength(1); j++)
{
    Console.Write($"{second[i, j]} ");
}
Console.WriteLine();
}
Console.WriteLine("третья попытка понять принцип");


int[,] table = new int[5, 3];
Random rend = new Random();
{
for (int i = 0; i < table.GetLength(0); i++)
{
for (int j = 0; j < table.GetLength(1); j++)
{
    table[i, j] = rend.Next(2, 5);
} 
}
}

for (int i = 0; i < table.GetLength(0); i++)
{
    for (int j = 0; j < table.GetLength(1); j++)
    {
        Console.Write($"{table[i, j]} ");
    }
    Console.WriteLine("поняла))))))");
}
*/



// создаем функции по предыдущему коду
// функции заполнение массива и вывод на экран

// функция, которая сгенерирует двумерный массив из случайных целых чисел
//1. что будет делать функция? она будет ВЫДЕЛЯТЬ ПАМЯТЬ для массива некоторого размера и заполнит его целыми числами
//2. какие данные ей1 понадобятся? для выделения участка памяти необходимо знать его размер. то есть для массива в виде строк и столбцов в функцию нужно передать в качестве параметров
//3. что будет возвращать функия? функция будет возвращать двумерный массив, его можно вернуть в качестве возвращаемого значения
// int[,] matrix = new int[4, 4]; // наш массив, с которым будем работать 
//Random rand = new Random(); // объект случайных чисел
//укажем тип возвращаемого значения - двумерный целочисленный массив, далее имя функии и ее параметры- их два параметра- количество строк(int row) и количество столбцов (int colums)
/*
int[,] CreateMat(int rowCount, int columsCount) // row и colums нам понадобятся для создания размера массива
{
    int[,] matrix = new int[rowCount, columsCount];
    Random rand = new Random();
    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            matrix[i, j] = rand.Next(20, 50);
        }
    }
    return matrix; // поскольку функция имеет возвращаемый тип, просим ее ВЕРНУТЬ созданный и заполненный новый массив
}

// код для выведения функции на экран, тоже оформляем в виде функции
// функция, которая что то выводит на экран, не возвращаемая, то есть ее метод void
void PrintMatrix(int[,] matrix) // тип данных void, имя функции PrintMatrix, переданный параметр массив int[,] matrix, который необходимо напечатать
{
    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            Console.Write($"{matrix[i, j]} ");
        }
        Console.WriteLine();
    }

}

// проверим работоспособность функции
// создадим массив mat и в него передадим функцию CreateMat. в CreateMat в скобках укажем (передадим параметры) количество строк и столбцов
int[,] mat = CreateMat (2, 10); // показатели в скобках можно менять и создавать разного размера двумерные массивы
// затем выведем массив на экран, воспользуемся функцией PrintMatrix и передадим ей вышесозданный массив в котором хранятся данные из функции создания массива

PrintMatrix(mat); // работает
*/
// теперь создам функции сама
/*
int[,] CreateArray(int col, int mol) // в параметры передаем тип int, потому что в вызове функции принимает целое число, а не массив!!!!!!!
{
    int[,] table = new int[col, mol];
    Random m = new Random();
    {
        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                table[i,j] = m.Next(100, 1000);
            } 
        }
        return table; 
    } 
}

void PrintAr ( int[,] table)
{
    for (int i = 0; i < table.GetLength(0); i++)
    {
        for (int j = 0; j < table.GetLength(1); j++)
        {
            Console.Write($" {table[i, j]} ");
        }
        Console.WriteLine();
    }

    //Console.WriteLine();
}

int[,] a = CreateArray(5, 9);
PrintAr(a);

*/

// еще раз напишу, чтобы запомнить. работает
/*

using System.Runtime.InteropServices;

int[,] MakeAr (int a, int b)
{
  int[,] c = new int [a, b];
  Random d = new Random();
  {
    for (int i = 0; i < c.GetLength(0); i++)
    {
        for (int j = 0; j < c.GetLength(1); j++)
        {
            c[i, j] = d.Next(1, 3);
        }
    }
  }
  return c;
}

void PrintA (int[,] c)
{
    for (int i = 0; i < c.GetLength(0); i++)
    {
        for (int j = 0; j < c.GetLength(1); j++)
        {
            Console.Write($"{c[i, j]} ");
        }
        Console.WriteLine();
    }
    // Console.Write(" ");
}

int[,] e = MakeAr (4, 5);
PrintA(e);
*/
// Console.Clear();
// разные способы создания двумерных массивов
// при создании массива сразу указывать данные
/*
int[,] mas = new int[5, 4] {
{1, 2, 3, 4},
{5, 6, 7, 8},
{9, 10, 11, 12},
{13, 14, 15, 16},
{17, 18, 19, 20},
};
{
    for (int i = 0; i < mas.GetLength(0); i++)
    {
        for (int j = 0; j < mas.GetLength(1); j++)
        {
            Console.Write($"{mas[i, j]} ");
        }
        Console.WriteLine(); // просим вывести массив после первого цикла прохождения 
    }
     Console.WriteLine();
}

// при указании параметров массива можно его размеры не указывать, если они извнстны
int[,] max = new int[,] 
{
    {1, 2, 3},
    {4, 5, 6} // в самом массив при указании параетров ; ставить не надо, только б
};
{
    for (int i = 0; i < max.GetLength(0); i++)
    {
        for (int j = 0; j < max.GetLength(1); j++)
        {
            Console.Write($"{max[i,j]} ");
        }
        Console.WriteLine();
    }
}
Console.WriteLine(" ");

// самый компактный способ задать массив без указания оператора выделения памяти
int[,] min = {
    {10, 20, 30},
    {40, 50, 60},
    {70, 80, 90}
};
{
    for (int i = 0; i < min.GetLength(0); i++)
    {
        for (int j = 0; j < min.GetLength(1); j++)
        {
            Console.Write($"{min[i,j]} ");
        }
        Console.WriteLine();
    } 
}
*/

// создание двумерного массива из целых чисел. вывести на экран числа, сумма цифр которых четная
/*
1) создать массив, заполнить его целыми числами. получилось
2) пройтись по всем элементам массива. получается
3) взятие очередного элемента 
- проверить сумму чисел в элементе
- проверить, делится ли сумма на 2 без остатка (проверка на четность)
4) вывесли на экран числа, сумма которых четная.
*/
//Console.Clear();

int[,] FillArray(int a, int b)
{
    int[,] arr = new int[a, b];
    Random r = new Random();
    for (int i = 0; i < arr.GetLength(0); i++)
    {
        for (int j = 0; j < arr.GetLength(1); j++)
        {
            arr[i, j] = r.Next(10, 100);
        }
    }
    return arr;
}

void PrintArray(int[,] arr)
{
    for (int i = 0; i < arr.GetLength(0); i++)
    {
        for (int j = 0; j < arr.GetLength(1); j++)
        {
            Console.Write($"{arr[i, j]} ");
        }
        Console.WriteLine();
    }
}


int[,] c = FillArray(2, 3); // здесь хранится созданный массив
PrintArray(c);

foreach (int e in c)

{
    if (IfInteresting(e) == true)
    {
        Console.Write($"{e} ");
    }
     Console.Write("");
   // Console.WriteLine(" ошибка тут? ");
}
Console.WriteLine();
// Console.WriteLine(" ошибка тут? ");

bool IfInteresting(int value)
{
    int SumOfDig = GetSum(value);
    if (SumOfDig % 2 == 0)
    {
        return true;
    }
    return false;
}

int GetSum (int value)
{
    int sum = 0;
    while (value > 0)
    {
        sum = sum + value % 10;
        value = value / 10;
    }
    return sum;
}

//PrintArray(c); // эта функция выводит созданный массив

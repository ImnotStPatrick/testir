// 3 лекция. функции 
// (a * b) / ( c+ d) вычисление дроби:
/* 
 double CalculateFormula (int a, int b, int c, int d) // обьявили тип данных самой формулы, назвали функцию и в параметрах указали количество переменных
 {
    double numenator = a * b; // задали переменную нуменатор для того, чтобы хранить в ней результат умножения переменных a и b
    int denumenator = c + d; // задали переменную денуменатор для того, чтобы хранить в ней результат сложения переменных с и d
    double result = numenator / denumenator; // задали переменную с типом данных как у функции, для хранения результата вычисления первых двух переменных
    return result; // оператор reeturn возввращает значение переменной result, в которой хранится ответ вычисления всей функции после подсчетов

 }  
 double result = CalculateFormula(1, 2, 3, 4); // объявляем переменную result с типом данных как у функции и приравниваем ее к функции и задаем параметры (1, 2, 3, 4) для того, чтобы переменные a b c d получили свое значение и функция начала рабоать и вычислять
 Console.WriteLine(result); // просим консоль вывести ответ на экран. выведется ответ из предыдущей переменной, в которой хранится ответ
 */




 // 2. вывод квадрата чисел от 1 до n. 
 /*
 void PrintSquares(int limit) // тип данных функции указали void, потому что не возвращает ничего. задали имя фуункции и задали параметры
 {
    int i = 1; // переменная счетчик, которая будет считать все числа от 1 до n
    while ( i <= limit) // цикл while использован потому, что количество итераций (операций прохождения по счетчику) неизвестно. пока переменная счетчика меньше заданного параметра функции, цикл будет происходить
    { 
        Console.Write($"{i * i} "); // просим консоль вывести на экран текущий результат
        i++; // после завершенного цикла переходим к следующему элементу значения счетчика
    }
 }

 PrintSquares(5); // задаем аргументы для функции, которые необходимо посчитать. то есть функция будет выводить все квадраты чисел от 1 до 5
 Console.WriteLine(" первое число ");
 PrintSquares(10); // от 1 до 10
 Console.WriteLine(" второе число ");
 PrintSquares(15); /// от 1 до 15
 Console.WriteLine(" третье число ");
 */ 



 // замена четных чисел в массиве на 0
Console.Clear();
  void ZeroEvenElements(int[] arr) // создаем функцию, которая не возвращает значение, дае ей имя в переводе на русский: обнулить каждый элемент, и передаем параметры массива arr
  {
    for ( int i = 0; i < arr.Length; i++) // создаем цикл for, поскольку количество элементов в массиве известно. создаем переменную счетчик, сравниваем счетчик с количеством элементов в массиве и увеличиваем счетчик на единицу
    { if (arr[i] % 2 == 0) // выполняем маатематическую задачу на четность. если текущий элемент массива делится на 2 без остатка, он считается четным
      {
        arr[i] = 0; // в случае четности элемента массива, его значение меняется/ приравнивается к 0

      }
    }
  } //  на этом функция ZeroEvenElements считается законченной и написанной, теперь к ней можно обращаться и вызывать ее

 void PrintArray(int[] arr) // создаем функцию прохода по элементам массива и вывода их на экран
 {
    foreach ( int e in arr) // используем цикл foreach, потому что он может заглянуть в массив, но не меняет значение элементов массива, задаем переменную е - переменная самого цикла и указываем имя массива, в котором необходимо прооверить данные
    {
        Console.Write($"{e} "); // присваиваем переменной е значение текущего элемента массива для его вывода на экран
    }
 }

 int[] array = {1, 21, 30, 456, 53, 72, 97}; // задаем массив и указываем в нем числа, которые нужно проверить
 ZeroEvenElements(array);
 PrintArray(array); // вызываем обе функции 